// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId             String @unique
  name                String
  email               String @unique
  profileImage        String?
  subscription        Boolean? @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lemonSqueezyApiKey  String?
  storeIdq            String?
  webhookSecret       String?
  Projects            Project[] @relation("OwnedProjects")
  PurchasedProjects   Project[] @relation("PurchasedProjects")
  coins               Int      @default(5)
  CoinTransactions    CoinTransaction[]
}

model Project{
  id                  String @id @default(cuid())
  title               String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  slides              Json?
  userId              String @db.Uuid
  outlines            String[]
  isDeleted           Boolean @default(false)
  isSellable          Boolean @default(false)
  variebtId           String?
  thumbnail           String?
  themeName           String @default("light")

  User                User @relation("OwnedProjects", fields : [userId], references : [id])
  Purchasers          User[] @relation("PurchasedProjects")
}

model CoinTransaction {
  id                  String @id @default(cuid())
  userId              String @db.Uuid
  amount              Float
  coins               Int
  lemonSqueezyOrderId String?
  status              String // "pending", "completed", "failed"
  createdAt           DateTime @default(now())

  User                User @relation(fields: [userId], references: [id])
}